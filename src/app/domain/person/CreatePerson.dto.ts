import { IsEmail, Length, IsInt, Min, Max } from "class-validator";

import type { IPerson } from "./Person.types";

// Один зі способів виконати валідацію даних — використати бібліотеку class-validator, яку також часто використовують у NestJS. Для її використання нам потрібно описати DTO, або Data Transfer Object, це об'єкт, який використовується для інкапсуляції даних та їхнього передавання між процесами. У контексті застосунку, це зазвичай означає передачу даних між клієнтом і сервером.

// DTO зазвичай описується за допомогою класу. У нас є інтерфейс IPerson де ми описали всі поля, давайте створимо на нього DTO.

// Ми взяли інтерфейс IPerson і застосували його до класу CreatePerson, але за допомогою Omit виключили id. Припустимо, що ми не хочемо давати користувачам можливість задавати id самостійно.

export class CreatePerson implements Omit<IPerson, "id"> {
  @Length(2, 20)
  name: string;

  @IsEmail()
  email: string;

  @IsInt()
  @Min(18)
  @Max(99)
  age: number;
}

// Деякі з декораторів, які ми використовували з бібліотеки class-validator, включають:
// @IsEmail() — перевіряє, чи є значення дійсною адресою електронної пошти.
// @Length(min, max) — перевіряє, чи знаходиться довжина рядка в зазначеному діапазоні.
// @IsInt() — перевіряє, чи є значення цілим числом.
// @Min(), @Max() — перевіряє, чи знаходиться числове значення в зазначеному діапазоні.